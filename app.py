import streamlit as st
import pandas as pd
import plotly.express as px
import joblib
import folium
from streamlit_folium import folium_static
from branca.colormap import LinearColormap 

# --- Configuracion inicial ---
st.set_page_config(page_title="Dashboard Electoral", layout="wide")

# --- Cargar estilos personalizados ---
st.markdown("""
    <style>
    div.stButton > button:hover {
        background-color: #ff5733;
        color: white;
        transition: 0.3s ease;
    }
    .hover-box {
        background-color: #f0f0f0;
        padding: 10px;
        border-radius: 10px;
        transition: 0.3s;
        margin-bottom: 1rem;
    }
    .hover-box:hover {
        background-color: #d0e6f7;
    }
    </style>
""", unsafe_allow_html=True)

# --- Cargar datos ---
df = pd.read_csv("dataset_electoral.csv")

# --- Titulo principal ---
st.title("üåè Predicci√≥n Electoral Interactiva")

# --- Tabs ---
tabs = st.tabs(["üåê Resumen Nacional", "üåç An√°lisis Regional", "üßë‚Äçüè´ Demograf√≠a", "üîÆ Modelo de Predicci√≥n", "üß† Simulaci√≥n de Escenarios"])

# ----------- TAB 1: Resumen Nacional ----------- 
with tabs[0]:
    st.subheader("Resumen Nacional de Ganadores")

    # Dividir en columnas para ajustar los gr√°ficos
    col1, col2 = st.columns(2)

    # Gr√°fico de ganadores (Distribuci√≥n de Ganadores)
    with col1:
        st.markdown("**üîé ¬øQui√©n lidera a nivel nacional?**")
        st.caption("Este gr√°fico muestra la cantidad de veces que cada candidato aparece como ganador seg√∫n las simulaciones del modelo.")
        fig_ganador = px.histogram(
            df.sort_values("ganador"), x="ganador", color="ganador",
            title="Distribuci√≥n de Ganadores",
            category_orders={"ganador": df["ganador"].value_counts().index.tolist()},
            color_discrete_sequence=px.colors.qualitative.Safe
        )
        fig_ganador.update_layout(showlegend=False)
        st.plotly_chart(fig_ganador, use_container_width=True)

    # Gr√°fico de probabilidades (Distribuci√≥n de Probabilidades de Victoria)
    with col2:
        st.markdown("**üìä ¬øCu√°n segura es la predicci√≥n?**")
        st.caption("Una mayor probabilidad implica mayor confianza en que ese candidato ganar√°.")
        fig_prob = px.histogram(
            df, x="probabilidad", nbins=20,
            color_discrete_sequence=["#1f77b4"],
            title="Distribuci√≥n de Probabilidades de Victoria"
        )
        fig_prob.update_layout(xaxis_title="Probabilidad de Victoria", yaxis_title="Frecuencia")
        st.plotly_chart(fig_prob, use_container_width=True)

    # Gr√°fico de comparaci√≥n regional (Solo en la pesta√±a de An√°lisis Regional)
    st.subheader("Poblaci√≥n vs Indecisos por regi√≥n")
    df_map = df.groupby("region").agg({
        "probabilidad": "mean",
        "poblacion_region": "first",
        "indecisos": "mean"
    }).reset_index()

    fig_bar_stacked = px.bar(
        df_map.sort_values("poblacion_region", ascending=False),
        x='region',
        y='poblacion_region',
        color='indecisos',
        labels={'region': 'Regi√≥n', 'poblacion_region': 'Poblaci√≥n', 'indecisos': 'Indecisos (%)'},
        color_continuous_scale='viridis',
        hover_data={'probabilidad': ':.2f', 'indecisos': ':.2%'}
    )

    fig_bar_stacked.update_traces(
        hovertemplate="<b>%{x}</b><br>" +
                      "Poblaci√≥n: %{y:,.0f}<br>" +
                      "Indecisos: %{marker.color:.2%}<br>" +
                      "Probabilidad: %{customdata[0]:.2%}<extra></extra>",
        texttemplate='%{y:,.0f}',
        textposition='outside'
    )

    fig_bar_stacked.update_layout(
        uniformtext_minsize=10,
        uniformtext_mode='hide',
        height=600,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.2,
            xanchor="center",
            x=0.5
        ),
        hoverlabel=dict(
            bgcolor="white",
            font_size=14,
            font_family="Arial",
            bordercolor="gray"
        )
    )

    st.markdown("**üåé Comparaci√≥n Regional**")
    st.caption("Este gr√°fico permite comparar el tama√±o poblacional y el nivel de indecisi√≥n electoral en cada regi√≥n.")
    st.plotly_chart(fig_bar_stacked, use_container_width=True)


# ----------- TAB 2: An√°lisis Regional ----------- 
with tabs[1]:
    st.subheader("üîç An√°lisis por Regi√≥n")

    region_seleccionada = st.selectbox("Selecciona una regi√≥n", sorted(df["region"].unique()))
    df_region = df[df["region"] == region_seleccionada]

    col1, col2 = st.columns(2)

    # Gr√°fico de Probabilidad de Victoria en la regi√≥n seleccionada
    with col1:
        st.markdown(f"**üìä Distribuci√≥n de Probabilidad de Victoria ({region_seleccionada})**")
        st.caption("Cada punto representa una estimaci√≥n individual. Las cajas agrupan el rango t√≠pico de probabilidades por candidato.")
        fig_box = px.box(
            df_region, x="candidato", y="probabilidad", color="candidato",
            points="all", hover_data=df_region.columns,
            category_orders={"candidato": df_region.groupby("candidato")["probabilidad"].mean().sort_values(ascending=False).index.tolist()},
            color_discrete_sequence=px.colors.qualitative.Set2,
            title=f"Probabilidad de Victoria por Candidato en {region_seleccionada}"
        )
        st.plotly_chart(fig_box, use_container_width=True)

    # Gr√°fico de Indecisos en la regi√≥n seleccionada
    with col2:
        st.markdown("**üß≠ Nivel de Indecisi√≥n por Candidato**")
        st.caption("Muestra el porcentaje promedio de personas indecisas por cada candidato en la regi√≥n.")
        df_indecisos = df_region.groupby("candidato")["indecisos"].mean().round(2).reset_index()
        fig_bar = px.bar(
            df_indecisos.sort_values("indecisos", ascending=False),
            x="candidato", y="indecisos", color="candidato",
            text="indecisos",
            color_discrete_sequence=px.colors.qualitative.Set1,
            title=f"Porcentaje Promedio de Indecisos por Candidato en {region_seleccionada}"
        )
        fig_bar.update_traces(texttemplate='%{text:.2f}%', textposition='outside')
        fig_bar.update_layout(yaxis_title="Indecisos (%)")
        st.plotly_chart(fig_bar, use_container_width=True)

    # Mostrar tabla detallada para la regi√≥n seleccionada debajo de los gr√°ficos
    st.markdown("---")
    st.markdown(f"**üìã Datos detallados de la regi√≥n: {region_seleccionada}**")
    st.caption("Visualiza los registros individuales correspondientes a la regi√≥n seleccionada.")

    st.markdown(""" 
    <div class="hover-box">
        Esta tabla muestra los valores de probabilidad, indecisi√≥n y caracter√≠sticas demogr√°ficas 
        para analizar en detalle el comportamiento electoral regional.
    </div>
    """, unsafe_allow_html=True)

    # Asegurar que la columna 'region' est√© visible aunque est√© filtrado
    cols = ["region"] + [col for col in df_region.columns if col != "region"]

    # Mostrar la tabla ocupando el ancho completo
    st.dataframe(df_region[cols].reset_index(drop=True), use_container_width=True, height=400)



# ----------- TAB 3: Demograf√≠a ----------- 
with tabs[2]:
    st.subheader("An√°lisis Demogr√°fico")
    st.caption("Explora el apoyo electoral cruzado con sexo y grupo etario.")

    col1, col2 = st.columns(2)
    sexo_sel = col1.radio("Sexo:", df["sexo"].unique())
    edad_sel = col2.selectbox("Grupo Etario:", df["edad_grupo"].unique())

    # Filtrar el DataFrame seg√∫n las selecciones de sexo y grupo etario
    df_filtrado = df[(df["sexo"] == sexo_sel) & (df["edad_grupo"] == edad_sel)]

    # Crear el gr√°fico de barras
    fig_demo = px.histogram(
        df_filtrado.sort_values("candidato"), 
        x="candidato", color="ganador",
        title=f"Apoyo Electoral - {sexo_sel}, Edad {edad_sel}",
        barmode="group",
        color_discrete_sequence=px.colors.qualitative.Bold
    )
    fig_demo.update_layout(
        xaxis_title="Candidato", 
        yaxis_title="Frecuencia de Apoyo"
    )
    st.plotly_chart(fig_demo, use_container_width=True)

# ----------- TAB 4: Predicci√≥n ----------- 

with tabs[3]:  # Esta es tu pesta√±a "Modelo de Predicci√≥n"
    st.subheader("üîç Predicci√≥n de Resultados Electorales")
    st.markdown("Completa los datos para estimar la **probabilidad de victoria** y si el candidato **ganar√≠a o no**.")

    # Cargar modelos si no se han cargado ya
    if "reg_model" not in st.session_state:
        import joblib
        reg_model = joblib.load("models/reg_arbol.pkl")
        class_model = joblib.load("models/modelo_xgb.pkl")
        label_encoders = joblib.load("models/label_encoders.pkl")
        st.session_state.reg_model = reg_model
        st.session_state.class_model = class_model
        st.session_state.label_encoders = label_encoders
    else:
        reg_model = st.session_state.reg_model
        class_model = st.session_state.class_model
        label_encoders = st.session_state.label_encoders

        #st.write("Label Encoders cargados:", list(label_encoders.keys()))

    def codificar_input(input_dict, label_encoders):
        df = pd.DataFrame([input_dict])
        for col, le in label_encoders.items():
            df[col] = le.transform(df[col])
        return df

    with st.form("formulario_prediccion"):
        col1, col2 = st.columns(2)

        with col1:
            region = st.selectbox("üó∫Ô∏è Regi√≥n", label_encoders["region"].classes_)
            candidato = st.selectbox("üë§ Candidato", label_encoders["candidato"].classes_)
            sexo = st.selectbox("üß¨ Sexo", label_encoders["sexo"].classes_)
            edad_grupo = st.selectbox("üéÇ Grupo Etario", label_encoders["edad_grupo"].classes_)
            

        with col2:
            ingreso_promedio = st.slider("üí∞ Ingreso Promedio", 500.0, 5000.0, 1500.0)
            score = st.slider("üìà Score", 0.0, 1.0, 0.5)
            indecisos = st.slider("üåÄ Nivel de Indecisos (%)", 0.0, 100.0, 20.0)
            porcentaje_grupo = st.slider("üë• Porcentaje del Grupo Etario (%)", 0.0, 100.0, 30.0)
            poblacion_region = st.slider("üèôÔ∏è Poblaci√≥n Regional", 1000, 1000000, 50000)
            sentimiento = st.slider("üí¨ Sentimiento", min_value=0.2, max_value=0.8, step=0.01)


        submitted = st.form_submit_button("üîç Predecir")

    if submitted:
        input_dict = {
            "region": region,
            "candidato": candidato,
            "sexo": sexo,
            "edad_grupo": edad_grupo,
            "poblacion_region": poblacion_region,
            "porcentaje_grupo": porcentaje_grupo,
            "ingreso_promedio": ingreso_promedio,
            "score": score,
            "sentimiento": sentimiento,
            "indecisos": indecisos,
            
            
        }

        X_input = codificar_input(input_dict, label_encoders)

        # Predicci√≥n regresiva
        probabilidad_estim = reg_model.predict(X_input)[0]
        st.metric("üìä Probabilidad estimada de victoria", f"{probabilidad_estim*100:.2f}%")

        # Clasificaci√≥n
        class_pred = class_model.predict(X_input)[0]
        class_prob = class_model.predict_proba(X_input)[0][class_pred]

        # Guardar en sesi√≥n
        st.session_state.prediccion_resultado = {
           "input_data": input_dict,
        "X_input": X_input,
        "probabilidad": float(probabilidad_estim),
        "ganador": int(class_pred),
        "confianza": float(class_prob)
        }

        #resultado = "GANAR√çA" if class_pred == 1 else "NO GANAR√çA"
        if class_pred == 1:
           st.success(f"‚úÖ El candidato seleccionado **GANAR√çA** en este escenario. üì¢")
        else:
           st.warning(f"‚ùå El candidato seleccionado **NO GANAR√çA** seg√∫n la predicci√≥n actual. ‚ö†Ô∏è")

        st.info(f"üîç Confianza del modelo: {class_prob*100:.2f}%")

# ----------- TAB 5: Simulaci√≥n ----------- 
with tabs[4]:
    st.title("üß† Escenarios y Simulaciones")
    st.markdown("Simula diferentes escenarios con base en las predicciones o ingresa tus propios valores.")

    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    import graphviz as graphviz

    st.subheader("‚öôÔ∏è Fuente de datos para simulaci√≥n")
    modo_entrada = st.radio("¬øC√≥mo deseas cargar los datos?", ["üì• Ingresar manualmente", "üìä Usar datos predichos de la pesta√±a anterior"])

    if modo_entrada == "üìä Usar datos predichos de la pesta√±a anterior":
        try:
            if "resultado_prediccion" in st.session_state:
                datos_pred = st.session_state.resultado_prediccion
                probabilidad = datos_pred["probabilidad"]
                gana = datos_pred["ganador"]
                st.success("‚úÖ Datos cargados desde la predicci√≥n anterior.")
            else:
                st.warning("‚ö†Ô∏è No se encontr√≥ una predicci√≥n previa. Ingresa los valores manualmente.")
                modo_entrada = "üì• Ingresar manualmente"
        except:
            st.error("Error al cargar datos predichos.")
            modo_entrada = "üì• Ingresar manualmente"

    if modo_entrada == "üì• Ingresar manualmente":
        col1, col2 = st.columns(2)
        with col1:
            probabilidad = st.slider("Probabilidad de ganar (%)", 0.0, 100.0, 75.0, step=0.1)
        with col2:
            gana = st.checkbox("¬øGanador en escenario?", value=True)

    col3, col4 = st.columns(2)
    with col3:
        presupuesto = st.number_input("Presupuesto estimado (en miles)", min_value=0, step=10)
        exposicion = st.selectbox("Nivel de exposici√≥n", ["baja", "media", "alta"])
    with col4:
        influencia = st.selectbox("Influencia en redes", ["baja", "media", "alta"])

    st.markdown("---")
    if st.button("‚ñ∂Ô∏è Ejecutar Simulaci√≥n"):
        prob_decimal = probabilidad / 100

        # √Årbol de decisi√≥n visual e interactivo
        def mostrar_arbol_decision(prob, ganador, exp, infl):
            st.subheader("üìç √Årbol de decisi√≥n")
            dot = graphviz.Digraph()
            dot.node("A", "¬øProbabilidad > 60%?")
            if prob > 0.6:
                dot.node("B", "¬øInfluencia Alta?")
                dot.edge("A", "B", "S√≠")
                if infl == "alta":
                    dot.node("C", "‚úÖ Apoyar (Alta influencia)")
                    dot.edge("B", "C", "S√≠")
                elif exp == "alta":
                    dot.node("D", "‚úÖ Apoyar (Alta exposici√≥n)")
                    dot.edge("B", "D", "No, pero exposici√≥n alta")
                else:
                    dot.node("E", "ü§î Evaluar m√°s indicadores")
                    dot.edge("B", "E", "No")
            else:
                dot.node("F", "‚ùå No apoyar")
                dot.edge("A", "F", "No")

            st.graphviz_chart(dot)

        # Matriz de pago mejorada
        def mostrar_matriz_pago():
            st.subheader("üìä Matriz de Pago (Decisi√≥n de campa√±a)")
            matriz = pd.DataFrame({
                "Decisi√≥n ‚Üì / Resultado ‚Üí": ["Apoyar", "No Apoyar"],
                "Gana": [100, -50],
                "Pierde": [-100, 0]
            }).set_index("Decisi√≥n ‚Üì / Resultado ‚Üí")
            st.dataframe(matriz, use_container_width=True)

        # Simulaci√≥n de Montecarlo
        def simular_montecarlo(prob, n=1000):
            st.subheader("üé≤ Simulaci√≥n de Montecarlo")
            simulaciones = np.random.rand(n) < prob
            tasa_ganadora = np.mean(simulaciones)

            col_sim1, col_sim2 = st.columns(2)
            with col_sim1:
                st.metric("Tasa estimada de victoria", f"{tasa_ganadora*100:.2f} %")
            with col_sim2:
                st.metric("N√∫mero de simulaciones", f"{n:,}")

            fig, ax = plt.subplots()
            ax.hist(simulaciones.astype(int), bins=[-0.5, 0.5, 1.5], edgecolor='black', rwidth=0.6, color="#3b82f6")
            ax.set_xticks([0, 1])
            ax.set_xticklabels(['Pierde', 'Gana'])
            ax.set_ylabel("Frecuencia")
            st.pyplot(fig)

            # Opcional: descarga CSV
            if st.checkbox("üì• Descargar resultados de la simulaci√≥n"):
                df_sim = pd.DataFrame({"Resultado": np.where(simulaciones, "Gana", "Pierde")})
                st.download_button("Descargar CSV", df_sim.to_csv(index=False), "simulacion_montecarlo.csv")

        # Insights accionables
        def mostrar_insights(prob, ganador, exp, infl):
            st.subheader("üîç Insights accionables")
            insights = []

            if prob > 0.8 and ganador:
                insights.append("‚úÖ Alta probabilidad de victoria. Invertir m√°s en zonas con exposici√≥n baja.")
            if prob < 0.5:
                insights.append("‚ö†Ô∏è Riesgo elevado de derrota. Enfocar recursos en redes y discurso positivo.")
            if infl == "alta" and exp != "alta":
                insights.append("üéØ Fortalezca la visibilidad en medios para potenciar su influencia actual.")
            if exp == "media" and not ganador:
                insights.append("üì¢ Reforzar presencia territorial con actos p√∫blicos.")
            if presupuesto < 50:
                insights.append("üí∞ Presupuesto limitado. Optimizar microsegmentaci√≥n de mensajes.")

            if insights:
                for i, tip in enumerate(insights[:3]):
                    st.info(f"Insight {i+1}: {tip}")
            else:
                st.info("üìå Mantenga seguimiento regular de exposici√≥n, presupuesto e intenci√≥n de voto.")

        # Ejecutar todo
        mostrar_arbol_decision(prob_decimal, gana, exposicion, influencia)
        mostrar_matriz_pago()
        simular_montecarlo(prob_decimal)
        mostrar_insights(prob_decimal, gana, exposicion, influencia)

